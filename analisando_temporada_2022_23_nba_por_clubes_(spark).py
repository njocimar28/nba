# -*- coding: utf-8 -*-
"""Analisando temporada 2022-23 NBA por clubes (spark).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lL-hgAIIeVcohsmLLQPDYsdJOKbWlxu0

# Análise temporada 2022-23 NBA por times

## Ajustando os dados

### Importando bibliotecas
"""

!pip install pyspark

import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
import urllib.request
from PIL import Image
import numpy as np
import requests
from pyspark.sql import SparkSession
from pyspark.sql.functions import sum, col, expr, round, monotonically_increasing_id
from io import BytesIO
from pyspark.sql import functions as F
from pyspark.sql.types import FloatType

"""### Importando os dados"""

# Criando um sessão Spark
spark = SparkSession.builder \
    .appName("nba_2023") \
    .getOrCreate()

# URL do arquivo CSV
url_nba = "https://github.com/njocimar28/nba/blob/84fe6c9d6cb5fdb3d5194e191e767927d5fd235e/jogadores_em_atividade_nba%20(1)?raw=true"

# Faz o download do arquivo
response_nba = requests.get(url_nba)
file_content_nba = response_nba.content

# Salva o conteúdo em um arquivo local
with open("nba.csv", "wb") as file:
    file.write(file_content_nba)

# Carrega o arquivo CSV no Spark
nba = spark.read.format("csv").option("header", "true").load("nba.csv")

nba.show()

# URL do arquivo classificação
url_classificacao = "https://github.com/njocimar28/nba/blob/bcc58bcfb72df9d00a3e5e12f9b8dc22cb3c4eac/classificacao_2023.csv?raw=true"

# Faz o download do arquivo  classificação
response_classificacao = requests.get(url_classificacao)
file_content_classificacao = response_classificacao.content

# Salva o conteúdo em um arquivo local
with open("classificacao.csv", "wb") as file:
    file.write(file_content_classificacao)

# Carrega o arquivo CSV no Spark
classificacao = spark.read.format("csv").option("header", "true").load("classificacao.csv")

classificacao.show(30)

"""### Analisando e transformando os dados"""

nba.printSchema()

classificacao.printSchema()

# filtrando pela temporada 2022-23
temporada_2023 = nba.filter(col("SEASON_ID") == "2022-23")

# Criando média das estatiticas por time
nba_por_time = temporada_2023.groupby("TEAM_ABBREVIATION").agg(
    round((sum("AST") / 82), 1).alias("AST"),
    round((sum("REB") / 82), 1).alias("REB"),
    round((sum("OREB") / 82), 1).alias("OREB"),
    round((sum("DREB") / 82), 1).alias("DREB"),
    round((sum("BLK") / 82), 1).alias("BLK"),
    round((sum("STL") / 82), 1).alias("STL"),
    round((sum("TOV") / 82), 1).alias("TOV"),
    round((sum("FTM") / 82), 1).alias("FTM"),
    round((sum("FTA") / 82), 1).alias("FTA"),
    round((sum("FGA") / 82), 1).alias("FGA"),
    round((sum("FGM") / 82), 1).alias("FGM"),
    round((sum("FG3A") / 82), 1).alias("FG3A"),
    round((sum("FG3M") / 82), 1).alias("FG3M"),
    round((sum("PF") / 82), 1).alias("PF")
)

#Excluindo os dados do time "TOT" que representa a soma dos dados dos jogadores que trocaram de time durante a temporada
nba_por_time = nba_por_time.filter(col("TEAM_ABBREVIATION") != "TOT")

nba_por_time.show(30)

# Criando as colunas de porcentagem de Arremessos

nba_por_time = nba_por_time.withColumn(
    'FT_PCT', F.col('FTM') / F.col('FTA')*100
    ).withColumn(
        'FG_PCT', F.col('FGM') / F.col('FGA')*100
    ).withColumn(
        'FG3_PCT', F.col('FG3M') / F.col('FG3A')*100
)

# Renomear a coluna "abreviação" para "TEAM_ABBREVIATION" no DataFrame classificacao
classificacao = classificacao.withColumnRenamed("abreviação", "TEAM_ABBREVIATION")

# Realizar o join entre os DataFrames nba_por_time e classificacao e organizar pelo número de vitórias
dados_por_time_2023 = classificacao.join(nba_por_time, "TEAM_ABBREVIATION", "inner").orderBy(col("V").desc())

dados_por_time_2023.show(30)

dados_por_time_2023.printSchema()

# Lista de colunas a serem convertidas
colunas_para_converter_int = ["jogos", "V", "D", "V_CASA", "V_VISITANTE", "V_CONF", "D_CASA", "D_VISITANTE", "D_CONF"]

# Convertendo as colunas para inteiro
for coluna in colunas_para_converter_int:
    dados_por_time_2023 = dados_por_time_2023.withColumn(coluna, col(coluna).cast("integer"))

# Lista de colunas a serem convertidas
colunas_para_converter_float = ["FT_PCT", "FG_PCT", "FG3_PCT"]

# Convertendo as colunas para float
for coluna in colunas_para_converter_float:
    dados_por_time_2023 = dados_por_time_2023.withColumn(coluna, col(coluna).cast(FloatType()))

nba_por_time = nba_por_time.withColumn("FT_PCT", round(nba_por_time["FT_PCT"], 2))
nba_por_time = nba_por_time.withColumn("FG_PCT", round(nba_por_time["FG_PCT"], 2))
nba_por_time = nba_por_time.withColumn("FG3_PCT", round(nba_por_time["FG3_PCT"], 2))

dados_por_time_2023.printSchema()

"""### Criando lista / dicionários úteis"""

# Dicionário com o link dos logos dos times
times_nba = {
    'Atlanta Hawks': 'https://www.thesportsdb.com/images/media/team/badge/q3bx641635067495.png/preview',
    'Boston Celtics': 'https://www.thesportsdb.com/images/media/team/badge/4j85bn1667936589.png/preview',
    'Brooklyn Nets': 'https://www.thesportsdb.com/images/media/team/badge/n06q811667936857.png/preview',
    'Charlotte Hornets': 'https://www.thesportsdb.com/images/media/team/badge/xqtvvp1422380623.png/preview',
    'Chicago Bulls': 'https://www.thesportsdb.com/images/media/team/badge/yk7swg1547214677.png/preview',
    'Cleveland Cavaliers': 'https://www.thesportsdb.com/images/media/team/badge/tys75k1664478652.png/preview',
    'Dallas Mavericks': 'https://www.thesportsdb.com/images/media/team/badge/yqrxrs1420568796.png/preview',
    'Denver Nuggets': 'https://www.thesportsdb.com/images/media/team/badge/8o8j5k1546016274.png/preview',
    'Detroit Pistons': 'https://www.thesportsdb.com/images/media/team/badge/lg7qrc1621594751.png/preview',
    'Golden State Warriors': 'https://www.thesportsdb.com/images/media/team/badge/irobi61565197527.png/preview',
    'Houston Rockets': 'https://www.thesportsdb.com/images/media/team/badge/yezpho1597486052.png/preview',
    'Indiana Pacers': 'https://www.thesportsdb.com/images/media/team/badge/v6jzgm1503741821.png/preview',
    'Los Angeles Clippers': 'https://www.thesportsdb.com/images/media/team/badge/htj1sg1664478859.png/preview',
    'Los Angeles Lakers': 'https://www.thesportsdb.com/images/media/team/badge/spa6c11621594682.png/preview',
    'Memphis Grizzlies': 'https://www.thesportsdb.com/images/media/team/badge/m64v461565196789.png/preview',
    'Miami Heat': 'https://www.thesportsdb.com/images/media/team/badge/5v67x51547214763.png/preview',
    'Milwaukee Bucks': 'https://www.thesportsdb.com/images/media/team/badge/olhug01621594702.png/preview',
    'Minnesota Timberwolves': 'https://www.thesportsdb.com/images/media/team/badge/5xpgjg1621594771.png/preview',
    'New Orleans Pelicans': 'https://www.thesportsdb.com/images/media/team/badge/f341s31523700397.png/preview',
    'New York Knicks': 'https://www.thesportsdb.com/images/media/team/badge/wyhpuf1511810435.png/preview',
    'Oklahoma City Thunder': 'https://www.thesportsdb.com/images/media/team/badge/xpswpq1422575434.png/preview',
    'Orlando Magic': 'https://www.thesportsdb.com/images/media/team/badge/txuyrr1422492990.png/preview',
    'Philadelphia 76ers': 'https://www.thesportsdb.com/images/media/team/badge/71545f1518464849.png/preview',
    'Phoenix Suns': 'https://www.thesportsdb.com/images/media/team/badge/qrtuxq1422919040.png/preview',
    'Portland Trail Blazers': 'https://www.thesportsdb.com/images/media/team/badge/mbtzin1520794112.png/preview',
    'Sacramento Kings': 'https://www.thesportsdb.com/images/media/team/badge/5d3dpz1611859587.png/preview',
    'San Antonio Spurs': 'https://www.thesportsdb.com/images/media/team/badge/obucan1611859537.png/preview',
    'Toronto Raptors': 'https://www.thesportsdb.com/images/media/team/badge/ax36vz1635070057.png/preview',
    'Utah Jazz': 'https://www.thesportsdb.com/images/media/team/badge/ne4a051664478964.png/preview',
    'Washington Wizards': 'https://www.thesportsdb.com/images/media/team/badge/rhxi9w1621594729.png/preview'
}

# Lista com o nome dos times
lista_times_nba = [
    'Atlanta Hawks',
    'Boston Celtics',
    'Brooklyn Nets',
    'Charlotte Hornets',
    'Chicago Bulls',
    'Cleveland Cavaliers',
    'Dallas Mavericks',
    'Denver Nuggets',
    'Detroit Pistons',
    'Golden State Warriors',
    'Houston Rockets',
    'Indiana Pacers',
    'Los Angeles Clippers',
    'Los Angeles Lakers',
    'Memphis Grizzlies',
    'Miami Heat',
    'Milwaukee Bucks',
    'Minnesota Timberwolves',
    'New Orleans Pelicans',
    'New York Knicks',
    'Oklahoma City Thunder',
    'Orlando Magic',
    'Philadelphia 76ers',
    'Phoenix Suns',
    'Portland Trail Blazers',
    'Sacramento Kings',
    'San Antonio Spurs',
    'Toronto Raptors',
    'Utah Jazz',
    'Washington Wizards'
]

"""### Criando funções para demonstrar o desempenho dos times"""

# Função que cria um DF com as estatísticas dos times e plota seu logotipo

def mostrar_estatisticas(time):
   # Obter a imagem a partir do URL
    url_imagem = times_nba.get(time)
    response = requests.get(url_imagem)
    imagem = Image.open(BytesIO(response.content))

    # Criar uma nova imagem com fundo preto
    fundo_preto = Image.new('RGB', (250, 250), 'black')

    # Colar a imagem do logotipo sobre o fundo preto
    fundo_preto.paste(imagem, (0, 0), imagem)

    # Exibir a imagem com fundo preto
    plt.imshow(fundo_preto)
    plt.axis('off')  # Desativar os eixos
    plt.show()

    # Filtrar o DataFrame pelo time especificado
    estatisticas = dados_por_time_2023.filter(dados_por_time_2023['Time'] == time)

    # Selecionar as principais estatísticas
    estatisticas = estatisticas.select('Time', 'V', 'PTS', 'AST', 'REB', 'BLK', 'STL')

    # Renomear a coluna 'V' para 'Vitórias'
    estatisticas = estatisticas.withColumnRenamed(
        'V', 'Vitórias').withColumnRenamed(
            'PTS', 'Pontos').withColumnRenamed(
            'AST', 'Assistências').withColumnRenamed(
            'REB', 'Rebotes').withColumnRenamed(
            'BLK', 'Tocos').withColumnRenamed(
            'STL', 'Roubos de bola')

    # Exibir as estatísticas
    estatisticas.show()

# Função que gráfico de barras com os logos dos times

def plotar_grafico_com_logos(dataframe, atributo, titulo):
    # Converter o DataFrame Spark para um DataFrame do Pandas
    pandas_data = dataframe.toPandas()

    # Converter a coluna do atributo para tipo numérico
    pandas_data[atributo] = pandas_data[atributo].astype(float)

    # Criar uma figura e os eixos do gráfico
    fig, ax = plt.subplots(figsize=(12, 3))

    # Definir a posição inicial do primeiro time
    posicao_x = np.arange(len(pandas_data))

    # Percorrer os times selecionados
    for i, row in pandas_data.iterrows():
        time = row['Time']
        if time in times_nba:
            # Abrir a imagem a partir do URL
            with urllib.request.urlopen(times_nba[time]) as url:
                img = Image.open(url)
                img = img.convert('RGB')

            # Plotar a imagem
            ax.imshow(img, extent=[posicao_x[i], posicao_x[i] + 0.8, 0, row[atributo]], aspect='auto')

            # Adicionar o valor do dado acima da imagem
            ax.text(posicao_x[i] + 0.4, row[atributo] + 0.1, str(row[atributo]), ha='center', va='bottom')

    # Configurar os limites do eixo X e Y
    ax.set_xlim(0, len(pandas_data))
    ax.set_ylim(0, max(pandas_data[atributo]) * 1.1)

    # Configurar os rótulos do eixo X
    ax.set_xticks(posicao_x + 0.4)
    ax.set_xticklabels(pandas_data['Time'], rotation=45)

    # Configurar os rótulos dos eixos
    ax.set_ylabel(f'{atributo}')

    # Adicionar título ao gráfico
    plt.title(titulo)

    # Mostrar o gráfico
    plt.show()

# Função que cria um gráfico de barras horizontais com o logo dos times

def plotar_grafico_barras_horizontais(dataframe, atributo, conferencia, titulo):
    # Filtrar os dados pela conferência selecionada
    df_conferencia = dataframe[dataframe['CONFERÊNCIA'] == conferencia]

    # Converter o DataFrame Spark para um DataFrame do Pandas
    pandas_data = df_conferencia.toPandas()

    # Converter a coluna do atributo para tipo numérico
    pandas_data[atributo] = pandas_data[atributo].astype(float)

    # Criar uma figura e os eixos do gráfico
    fig, ax = plt.subplots(figsize=(1, 8))

    # Definir a posição inicial dos times
    posicao_y = np.arange(len(pandas_data))

    # Percorrer os times selecionados
    for i, row in pandas_data.iterrows():
        time = row['Time']
        if time in times_nba:
            # Abrir a imagem a partir do URL
            with urllib.request.urlopen(times_nba[time]) as url:
                img = Image.open(url)
                img = img.convert('RGB')

            # Plotar a imagem
            ax.imshow(img, extent=[0, row[atributo], posicao_y[i], posicao_y[i] + 0.8], aspect='auto')

            # Adicionar o valor do dado à direita da imagem com deslocamento
            ax.text(row[atributo] + 0.2, posicao_y[i] + 0.4, str(row[atributo]), ha='left', va='center', color='black',
                    bbox=dict(facecolor='white', edgecolor='none', boxstyle='round'))

    # Configurar os limites do eixo X e Y
    ax.set_xlim(0, max(pandas_data[atributo]) * 1.1)
    ax.set_ylim(0, len(pandas_data))

    # Configurar os rótulos do eixo Y
    ax.set_yticks(posicao_y + 0.4)
    ax.set_yticklabels(pandas_data['Time'])

    # Configurar os rótulos dos eixos
    ax.set_xlabel(f'{atributo}')
    ax.set_ylabel('Time')

    # Adicionar título ao gráfico
    plt.title(titulo)

    # Mostrar o gráfico
    plt.show()

# Função ajustada para plotar o top 5 dos times por arremessos

def plotar_grafico_arremessos(dataframe, atributo, titulo):
     # Limitar exibição para 5 elementos
    df_conferencia = dataframe.limit(5)

    # Converter o DataFrame Spark para um DataFrame do Pandas
    pandas_data = df_conferencia.toPandas()

    # Converter a coluna do atributo para tipo numérico
    pandas_data[atributo] = pandas_data[atributo].astype(float).round(2)

    # Criar uma figura e os eixos do gráfico
    fig, ax = plt.subplots(figsize=(1, 6))

    # Definir a posição inicial dos times
    posicao_y = np.arange(len(pandas_data))

    # Percorrer os times selecionados
    for i, row in pandas_data.iterrows():
        time = row['Time']
        if time in times_nba:
            # Abrir a imagem a partir do URL
            with urllib.request.urlopen(times_nba[time]) as url:
                img = Image.open(url)
                img = img.convert('RGB')

            # Plotar a imagem
            ax.imshow(img, extent=[0, row[atributo], posicao_y[i], posicao_y[i] + 0.8], aspect='auto')

            # Adicionar o valor do dado à direita da imagem com deslocamento
            ax.text(row[atributo] + 0.2, posicao_y[i] + 0.4, str(row[atributo]), ha='left', va='center', color='black',
                    bbox=dict(facecolor='white', edgecolor='none', boxstyle='round'))

    # Configurar os limites do eixo X e Y
    ax.set_xlim(0, max(pandas_data[atributo]) * 1.1)
    ax.set_ylim(0, len(pandas_data))

    # Configurar os rótulos do eixo Y
    ax.set_yticks(posicao_y + 0.4)
    ax.set_yticklabels(pandas_data['Time'])

    # Configurar os rótulos dos eixos
    ax.set_xlabel(f'{atributo}')
    ax.set_ylabel('Time')

    # Adicionar título ao gráfico
    plt.title(titulo)

    # Mostrar o gráfico
    plt.show()

"""## Classificação temporada 2023

### Classificação Geral
"""

# Filtrando os dados pela conferência Leste
classificacão_geral = dados_por_time_2023[['Time','V','D']]

# Criar coluna classificação
classificacão_geral = classificacão_geral.withColumn('Classificação', monotonically_increasing_id() + 1)

# Reordenando as colunas
classificacão_geral = classificacão_geral.select('Classificação', 'Time', 'V', 'D')

classificacão_geral.show(30)

"""### Classificação conferência Leste"""

# Filtrando os dados pela conferência Leste
classificacao_leste = classificacão_geral.filter(col("CONFERÊNCIA") == "LESTE")
classificacao_leste = classificacao_leste.withColumn('Classificação', monotonically_increasing_id() + 1)
classificacao_leste.show(15)

"""### Classificação conferência Oeste"""

# Filtrando os dados pela conferência Oeste
classificacao_oeste = classificacão_geral.filter(col("CONFERÊNCIA") == "OESTE")
classificacao_oeste = classificacao_oeste.withColumn('Classificação', monotonically_increasing_id() + 1)
classificacao_oeste.show(15)

"""## Criando Ranking para analisar o desempenho (Geral)

### Vitórias
"""

# Classificar o DataFrame por pontos em ordem decrescente (os melhores)
top_5_vitorias = dados_por_time_2023[[
    'Time','V','V_CASA','V_VISITANTE','V_CONF','CONFERÊNCIA'
    ]].sort("V", ascending=False).limit(5)
top_5_vitorias = top_5_vitorias.withColumnRenamed("V", "Vitórias")

top_5_vitorias.show()

plotar_grafico_com_logos(top_5_vitorias, 'Vitórias', 'Ranking das 5 Melhores equipes por Vitórias (82 jogos)')

"""#### Vitórias em Casa"""

plotar_grafico_com_logos(dados_por_time_2023.sort("V_CASA", ascending=False).limit(5), 'V_CASA', 'Ranking das 5 Melhores equipes por Vitórias em Casa (41 jogos)')

"""#### Vitórias Fora de Casa"""

plotar_grafico_com_logos(dados_por_time_2023.sort("V_VISITANTE", ascending=False).limit(5), 'V_VISITANTE', 'Ranking das 5 Melhores equipes por Vitórias Fora de Casa (41 jogos)')

"""#### Vitórias contra times da mesma conferência"""

plotar_grafico_com_logos(dados_por_time_2023.sort("V_CONF", ascending=False).limit(5), 'V_CONF', 'Ranking das 5 Melhores equipes por Vitórias dentro da Conferência (56 jogos)')

"""### Derrotas"""

# Classificar o DataFrame por pontos em ordem decrescente (os melhores)
ranking_derrotas = dados_por_time_2023[['Time','D','CONFERÊNCIA']].sort("D", ascending=False)

# Selecionar os 5 primeiros colocados
top_5_derrotas = ranking_derrotas.limit(5)
top_5_derrotas = top_5_derrotas.withColumnRenamed("D", "Derrotas")

top_5_derrotas.show()

plotar_grafico_com_logos(top_5_derrotas, 'Derrotas', 'Ranking das 5 Piores equipes por Derrotas')

"""#### Derrotas em Casa"""

plotar_grafico_com_logos(dados_por_time_2023.sort("D_CASA", ascending=False).limit(5), "D_CASA", 'Ranking das 5 Piores equipes por Derrotas em Casa')

"""#### Derrotas fora de Casa"""

plotar_grafico_com_logos(dados_por_time_2023.sort("D_VISITANTE", ascending=False).limit(5), "D_VISITANTE", 'Ranking das 5 Piores equipes por Derrotas fora de Casa')

"""#### Derrotas para time da mesma Conferência"""

plotar_grafico_com_logos(
    dados_por_time_2023.sort(
        "D_CONF", ascending=False).limit(5),
        "D_CONF",
        'Ranking das 5 Piores equipes por Derrotas na COnferência'
)

"""### Ataque

#### Melhor Ataque
"""

# Classificar o DataFrame por pontos em ordem decrescente (os melhores)
ranking_melhores_pts = dados_por_time_2023[['Time','PTS','CONFERÊNCIA']].sort("PTS", ascending=False)

# Selecionar os 5 primeiros colocados
top_5_pts = ranking_melhores_pts.limit(5)
top_5_pts = top_5_pts.withColumnRenamed("PTS", "Pontos")

top_5_pts.show()

plotar_grafico_com_logos(top_5_pts, 'Pontos', 'Ranking das 5 Melhores equipes em média de pontos por jogo (Melhor Ataque)')

"""#### Pior Ataque"""

# Classificar o DataFrame por pontos em ordem crescente (os piores)
ranking_piores_pts = dados_por_time_2023[['Time','PTS','CONFERÊNCIA']].sort("PTS", ascending=True)

# Selecionar os 5 primeiros colocados
top_5_piores_pts = ranking_piores_pts.limit(5)
top_5_piores_pts = top_5_piores_pts.withColumnRenamed("PTS", "Pontos")

top_5_piores_pts.show()

plotar_grafico_com_logos(top_5_piores_pts, 'Pontos', 'Ranking das 5 piores equipes em média de pontos por jogo (Pior Ataque)')

"""### Defesa

#### Melhor Defesa
"""

# Classificar o DataFrame por pontos em ordem decrescente (os melhores)
ranking_melhores_def = dados_por_time_2023[['Time','PTS CONTRA','CONFERÊNCIA']].sort("PTS CONTRA", ascending=True)

# Selecionar os 5 primeiros colocados
top_5_melhores_def = ranking_melhores_def.limit(5)
top_5_melhores_def = top_5_melhores_def.withColumnRenamed("PTS CONTRA", "Pontos Contra")

top_5_melhores_def.show()

plotar_grafico_com_logos(top_5_melhores_def, 'Pontos Contra', 'Ranking das 5 melhores equipes em média de pontos sofridos por jogo (Melhor Defesa)')

"""#### Pior Defesa"""

# Classificar o DataFrame por pontos em ordem decrescente (os melhores)
ranking_piores_def = dados_por_time_2023[['Time','PTS CONTRA','CONFERÊNCIA']].sort("PTS CONTRA", ascending=False)

# Selecionar os 5 primeiros colocados
top_5_piores_def = ranking_piores_def.limit(5)
top_5_piores_def = top_5_piores_def.withColumnRenamed("PTS CONTRA", "Pontos Contra")

top_5_piores_def.show()

plotar_grafico_com_logos(top_5_piores_def, 'Pontos Contra', 'Ranking das 5 piores equipes em média de pontos sofridos por jogo (Pior Defesa)')

"""### Arremessos

#### Arremessos de quadra
"""

# Classificar o DataFrame por pontos em ordem decrescente (os melhores)
ranking_arremessos = dados_por_time_2023[['Time', 'V', 'FG_PCT']].sort("FG_PCT", ascending=False)

# Selecionar os 5 primeiros colocados
top_5_arremessos = ranking_arremessos.limit(5)
top_5_arremessos = top_5_arremessos.withColumn("FG_PCT", round(top_5_arremessos["FG_PCT"], 2))

# Renomeando as 3 colunas
top_5_arremessos = top_5_arremessos.withColumnRenamed("FG_PCT", "Arremessos de quadra %")

top_5_arremessos.show()

plotar_grafico_arremessos(top_5_arremessos.sort('Arremessos de quadra %', ascending=True), 'Arremessos de quadra %', 'Top 5 em % Arremessos de quadra convertidos na temporada')

"""#### Arremessos de 3 pontos"""

# Classificar o DataFrame por pontos em ordem decrescente (os melhores)
ranking_fg3 = dados_por_time_2023[['Time', 'V', 'FG3_PCT']].sort("FG3_PCT", ascending=False)

# Selecionar os 5 primeiros colocados
top_5_fg3 = ranking_fg3.limit(5)
top_5_fg3 = top_5_fg3.withColumn("FG3_PCT", round(top_5_fg3["FG3_PCT"], 2))

# Renomeando as 3 colunas
top_5_fg3 = top_5_fg3.withColumnRenamed("FG3_PCT", "Arremessos de 3 pontos %")


top_5_fg3.show()

plotar_grafico_arremessos(top_5_fg3.sort("Arremessos de 3 pontos %", ascending=True), 'Arremessos de 3 pontos %', 'Top 5 em % de Arremessos de 3 pontos convertidos na temporada')

"""#### Lances Livres"""

# Classificar o DataFrame por pontos em ordem decrescente (os melhores)
ranking_ft = dados_por_time_2023[['Time', 'V', 'FT_PCT']].sort("FT_PCT", ascending=False)

# Selecionar os 5 primeiros colocados
top_5_ft = ranking_ft.limit(5)
top_5_ft = top_5_ft.withColumn("FT_PCT", round(top_5_ft["FT_PCT"], 2))

# Renomeando as 3 colunas
top_5_ft = top_5_ft.withColumnRenamed("FT_PCT", "Lances Livres %")


top_5_ft.show()

plotar_grafico_arremessos(top_5_ft.sort("Lances Livres %", ascending=True), 'Lances Livres %', 'Top 5 em % de Lances Livres convertidos na temporada')

"""### Assistências"""

# Classificar o DataFrame por assistências em ordem decrescente (os melhores)
ranking_melhores_ast = dados_por_time_2023[['Time','AST','CONFERÊNCIA']].sort("AST", ascending=False)

# Selecionar os 5 primeiros colocados
top_5_ast = ranking_melhores_ast.limit(5)
top_5_ast = top_5_ast.withColumnRenamed("AST", "Assistências")

top_5_ast.show()

plotar_grafico_com_logos(top_5_ast, 'Assistências', 'Ranking das 5 Melhores equipes em média de assistências')

"""### Rebotes"""

# Classificar o DataFrame por assistências em ordem decrescente (os melhores)
ranking_melhores_reb = dados_por_time_2023[['Time','REB', 'DREB', 'OREB', 'CONFERÊNCIA']].sort("REB", ascending=False)

# Selecionar os 5 primeiros colocados
top_5_reb = ranking_melhores_reb.limit(5)
top_5_reb = top_5_reb.withColumnRenamed("REB", "Rebotes").withColumnRenamed("DREB", "Rebotes Defensivos").withColumnRenamed("OREB", "Rebotes Ofensivos")

top_5_reb.show()

plotar_grafico_com_logos(top_5_reb, 'Rebotes', 'Ranking das 5 Melhores equipes em média de Rebotes por jogo')

"""#### Rebotes Defensivos"""

plotar_grafico_com_logos(top_5_reb.sort("Rebotes Defensivos", ascending=False), 'Rebotes Defensivos', 'Ranking das 5 Melhores equipes em média de Rebotes Defensivos por jogo')

"""#### Rebotes Ofensivos"""

plotar_grafico_com_logos(top_5_reb.sort("Rebotes Ofensivos", ascending=False), 'Rebotes Ofensivos', 'Ranking das 5 Melhores equipes em média de Rebotes Ofensivos por jogo')

"""### Tocos"""

# Classificar o DataFrame por assistências em ordem decrescente (os melhores)
ranking_melhores_blk = dados_por_time_2023[['Time','BLK','CONFERÊNCIA']].sort("BLK", ascending=False)

# Selecionar os 5 primeiros colocados
top_5_blk = ranking_melhores_blk.limit(5)
top_5_blk = top_5_blk.withColumnRenamed("BLK", "Tocos")

top_5_blk.show()

plotar_grafico_com_logos(top_5_blk, 'Tocos', 'Ranking das 5 Melhores equipes em média de Tocos por jogo')

"""### Roubos de bola"""

# Classificar o DataFrame por assistências em ordem decrescente (os melhores)
ranking_melhores_stl = dados_por_time_2023[['Time','STL','CONFERÊNCIA']].sort("STL", ascending=False)

# Selecionar os 5 primeiros colocados
top_5_stl = ranking_melhores_stl.limit(5)
top_5_stl = top_5_stl.withColumnRenamed("STL", "Roubos de bola")

top_5_stl.show()

plotar_grafico_com_logos(top_5_stl, 'Roubos de bola', 'Ranking das 5 Melhores equipes em média de Roubos de bola por jogo')

"""### Perda de posse (Turnover)"""

# Classificar o DataFrame por assistências em ordem decrescente (os melhores)
ranking_melhores_tov = dados_por_time_2023[['Time','TOV','CONFERÊNCIA']].sort("TOV", ascending=False)

# Selecionar os 5 primeiros colocados
top_5_tov = ranking_melhores_tov.limit(5)
top_5_tov = top_5_tov.withColumnRenamed("TOV", "Perda de posse (Turnover)")

top_5_tov.show()

plotar_grafico_com_logos(top_5_tov, 'Perda de posse (Turnover)', 'Ranking das 5 equipes com a maior média de Perda de posse (Turnover) por jogo')

"""### Faltas coletivas"""

# Classificar o DataFrame por assistências em ordem decrescente (os melhores)
ranking_melhores_pf = dados_por_time_2023[['Time','PF','CONFERÊNCIA']].sort("PF", ascending=False)

# Selecionar os 5 primeiros colocados
top_5_pf = ranking_melhores_pf.limit(5)
top_5_pf = top_5_pf.withColumnRenamed("PF", "Faltas Coletivas")

top_5_pf.show()

plotar_grafico_com_logos(top_5_pf, 'Faltas Coletivas', 'Ranking das 5 equipes com a maior média de Faltas coletivas por jogo')

"""## Conferências

### Conferência Leste - Classificação pelos principais quesitos (vitórias, Ataque, Defesa, Assistências e Rebotes

#### Vitórias
"""

plotar_grafico_barras_horizontais(dados_por_time_2023.sort("V", ascending=True), "V", "LESTE", "Classificação (Número de Vitórias)")

"""#### Ataque"""

plotar_grafico_barras_horizontais(dados_por_time_2023.sort("PTS", ascending=True), "PTS", "LESTE", "Melhor Ataque (média pontos por jogo)")

"""#### Defesa"""

plotar_grafico_barras_horizontais(dados_por_time_2023.sort("PTS CONTRA", ascending=False), "PTS CONTRA", "LESTE", "Melhor Defesa (média pontos sofridos por jogo)")

"""#### Assistências"""

plotar_grafico_barras_horizontais(dados_por_time_2023.sort("AST", ascending=True), "AST", "LESTE", "Melhor média de Assitências por jogo")

"""#### Rebotes"""

plotar_grafico_barras_horizontais(dados_por_time_2023.sort("REB", ascending=True), "REB", "LESTE", "Melhor média de Rebotes por jogo")

"""### Conferência Oeste - Classificação pelos principais quesitos (vitórias, Ataque, Defesa, Assistências e Rebotes

#### Vitórias
"""

plotar_grafico_barras_horizontais(dados_por_time_2023.sort("V", ascending=True), "V", "OESTE", "Classificação (Número de Vitórias)")

"""#### Ataque"""

plotar_grafico_barras_horizontais(dados_por_time_2023.sort("PTS", ascending=True), "PTS", "OESTE", "Melhor Ataque (média pontos por jogo)")

"""#### Defesa"""

plotar_grafico_barras_horizontais(dados_por_time_2023.sort("PTS CONTRA", ascending=False), "PTS CONTRA", "OESTE", "Melhor Defesa (média pontos sofridos por jogo)")

"""#### Assistências"""

plotar_grafico_barras_horizontais(dados_por_time_2023.sort("AST", ascending=True), "AST", "OESTE", "Melhor média de Assitências por jogo")

"""#### Rebotes"""

plotar_grafico_barras_horizontais(dados_por_time_2023.sort("REB", ascending=True), "REB", "OESTE", "Melhor média de Rebotes por jogo")

"""## Principais estatísticas por time (Vitórias | Pontos | Assistências | Rebotes | Tocos | Roubos de bola)"""

# Criando a visualização dos dados por time em ordem alfabética
for time in lista_times_nba:
  mostrar_estatisticas(time)