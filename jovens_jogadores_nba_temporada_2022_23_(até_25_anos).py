# -*- coding: utf-8 -*-
"""Jovens jogadores NBA temporada 2022-23 (até 25 anos).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fEUKmrYMK5q6TIheSJjg7eYR8RZ_BaSD

#**Jovens estrelas NBA temporada 2022-23 - até 25 anos**

## Conhecendo e tratando os dados
"""

# importando bibliotecas
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

# selecionando os dados
jogadores = pd.read_csv('https://github.com/njocimar28/nba/blob/84fe6c9d6cb5fdb3d5194e191e767927d5fd235e/jogadores_em_atividade_nba%20(1)?raw=true')

# tamanho dos dados
jogadores.shape

# analisando os dados
jogadores.head()

# tipos de dados
jogadores.dtypes

#transformando os dados float em int
jogadores[['PLAYER_AGE', 'MIN', 'FG_PCT', 'FG3_PCT', 'FT_PCT']] = jogadores[['PLAYER_AGE', 'MIN', 'FG_PCT', 'FG3_PCT', 'FT_PCT']].astype(int)
jogadores.dtypes

# verficando dados nulos
print(jogadores.isnull().sum())

print(jogadores.isna().sum())

#dicionário dos termos abreviados
dicionario_nba = {'PLAYER_ID': 'ID do jogador',
                  'SEASON_ID': 'ID da temporada',
                  'LEAGUE_ID': 'ID da liga',
                  'TEAM_ID': 'ID do time',
                  'TEAM_ABBREVIATION': 'Abreviação do time',
                  'PLAYER_AGE': 'Idade do jogador',
                  'GP': 'Partidas jogadas',
                  'GS': 'Partidas iniciadas como titular',
                  'MIN': 'Minutos jogados',
                  'FGM': 'Cestas de quadra convertidas',
                  'FGA': 'Cestas de quadra tentadas',
                  'FG_PCT': 'Percentual de acerto de cestas de quadra',
                  'FG3M': 'Cestas de três pontos convertidas',
                  'FG3A': 'Cestas de três pontos tentadas',
                  'FG3_PCT': 'Percentual de acerto de cestas de três pontos',
                  'FTM': 'Lances livres convertidos',
                  'FTA': 'Lances livres tentados',
                  'FT_PCT': 'Percentual de acerto de lances livres',
                  'OREB': 'Rebotes ofensivos',
                  'DREB': 'Rebotes defensivos',
                  'REB': 'Total de rebotes',
                  'AST': 'Assistências',
                  'STL': 'Roubadas de bola',
                  'BLK': 'Tocos',
                  'TOV': 'Perdas de bola',
                  'PF': 'Faltas pessoais',
                  'PTS': 'Pontos marcados'}

# Criando as colunas com media por jogo
lista_de_estatisticas = ['MIN', 'FGM', 'FGA', 'FG3M', 'FG3A',
                         'FTM', 'FTA', 'OREB', 'DREB',
                         'REB', 'AST', 'STL','BLK', 'TOV', 'PF', 'PTS', 'MIN'] # Considerado apenas colunas com números absolutos e excluindo as colunas com percetual (PCT)

for i in lista_de_estatisticas:
  jogadores['MEDIA_'+ i] = (jogadores[i] / jogadores['GP']).round(2)

jogadores.head()

# Excluir as colunas não utilizadas
colunas_excluidas = ['PLAYER_ID',	'LEAGUE_ID','TEAM_ID']
jogadores = jogadores.drop(columns=colunas_excluidas)

jogadores.head()

# Criando um dicionário com o nome dos times
times_nba = {
    'ATL': 'ATLANTA HAWKS',
    'BOS': 'BOSTON CELTICS',
    'BKN': 'BROOKLYN NETS',
    'CHA': 'CHARLOTTE HORNETS',
    'CHI': 'CHICAGO BULLS',
    'CLE': 'CLEVELAND CAVALIERS',
    'DAL': 'DALLAS MAVERICKS',
    'DEN': 'DENVER NUGGETS',
    'DET': 'DETROIT PISTONS',
    'GSW': 'GOLDEN STATE WARRIORS',
    'HOU': 'HOUSTON ROCKETS',
    'IND': 'INDIANA PACERS',
    'LAC': 'LOS ANGELES CLIPPERS',
    'LAL': 'LOS ANGELES LAKERS',
    'MEM': 'MEMPHIS GRIZZLIES',
    'MIA': 'MIAMI HEAT',
    'MIL': 'MILWAUKEE BUCKS',
    'MIN': 'MINNESOTA TIMBERWOLVES',
    'NOP': 'NEW ORLEANS PELICANS',
    'NYK': 'NEW YORK KNICKS',
    'OKC': 'OKLAHOMA CITY THUNDER',
    'ORL': 'ORLANDO MAGIC',
    'PHI': 'PHILADELPHIA 76ERS',
    'PHX': 'PHOENIX SUNS',
    'POR': 'PORTLAND TRAIL BLAZERS',
    'SAC': 'SACRAMENTO KINGS',
    'SAS': 'SAN ANTONIO SPURS',
    'TOR': 'TORONTO RAPTORS',
    'UTA': 'UTAH JAZZ',
    'WAS': 'WASHINGTON WIZARDS'
}

# Criando a coluna Time
jogadores['TIME'] = jogadores['TEAM_ABBREVIATION'].map(times_nba)

jogadores.head()

"""## Criando funções para análise dos dados

### Função média de pontos por jogo
"""

# Criando função para calcular a média de pontos por jogo
def calcular_media_pontos(time):
    media_pts = pd.DataFrame(time[['JOGADOR', 'MEDIA_PTS']])
    media_pts = media_pts.sort_values('MEDIA_PTS', ascending=False)
    media_pts = media_pts.reset_index(drop=True)
    media_pts['RANK'] = media_pts.index + 1
    return media_pts.head()

"""### Função média de assistências por jogo"""

# Criando função para calcular a média de assistências por jogo
def calcular_media_assistencias(time):
    media_ast = pd.DataFrame(time[['JOGADOR', 'MEDIA_AST']])
    media_ast = media_ast.sort_values('MEDIA_AST', ascending=False)
    media_ast = media_ast.reset_index(drop=True)
    media_ast['RANK'] = media_ast.index + 1
    return media_ast.head()

"""### Função média de rebotes por jogo"""

# Criando função para calcular media de rebotes por jogo
def calcular_media_rebotes(time):
    media_rebotes = pd.DataFrame(time[['JOGADOR', 'MEDIA_REB', 'MEDIA_OREB', 'MEDIA_DREB']])
    media_rebotes = media_rebotes.sort_values('MEDIA_REB', ascending=False)
    media_rebotes = media_rebotes.reset_index(drop=True)
    media_rebotes['REB_OFENSIVOS %'] = media_rebotes['MEDIA_OREB'] / media_rebotes['MEDIA_REB']
    media_rebotes['REB_DEFENSIVOS %'] = media_rebotes['MEDIA_DREB'] / media_rebotes['MEDIA_REB']
    media_rebotes['RANK'] = media_rebotes.index + 1
    media_rebotes = media_rebotes.head().round(2)
    return media_rebotes

# Criando função para calcular media de rebotes ofensivos por jogo
def calcular_media_rebotes_ofensivos(time):
    media_rebotes = pd.DataFrame(time[['JOGADOR', 'MEDIA_REB', 'MEDIA_OREB', 'MEDIA_DREB']])
    media_rebotes = media_rebotes.sort_values('MEDIA_OREB', ascending=False)
    media_rebotes = media_rebotes.reset_index(drop=True)
    media_rebotes['REB_OFENSIVOS %'] = media_rebotes['MEDIA_OREB'] / media_rebotes['MEDIA_REB']
    media_rebotes['REB_DEFENSIVOS %'] = media_rebotes['MEDIA_DREB'] / media_rebotes['MEDIA_REB']
    media_rebotes['RANK'] = media_rebotes.index + 1
    media_rebotes = media_rebotes.head().round(2)
    return media_rebotes

# Criando função para calcular media de rebotes defensivos por jogo
def calcular_media_rebotes_defensivos(time):
    media_rebotes = pd.DataFrame(time[['JOGADOR', 'MEDIA_REB', 'MEDIA_OREB', 'MEDIA_DREB']])
    media_rebotes = media_rebotes.sort_values('MEDIA_DREB', ascending=False)
    media_rebotes = media_rebotes.reset_index(drop=True)
    media_rebotes['REB_OFENSIVOS %'] = media_rebotes['MEDIA_OREB'] / media_rebotes['MEDIA_REB']
    media_rebotes['REB_DEFENSIVOS %'] = media_rebotes['MEDIA_DREB'] / media_rebotes['MEDIA_REB']
    media_rebotes['RANK'] = media_rebotes.index + 1
    media_rebotes = media_rebotes.head().round(2)
    return media_rebotes

"""### Função média de lances livres por jogo"""

# Criando função para calcular media de lances livres por jogo
def calcular_media_lances_livres(time):
    media_lances_livres = pd.DataFrame(time[['JOGADOR', 'MEDIA_FTA', 'MEDIA_FTM']])
    media_lances_livres['% ACERTOS'] = media_lances_livres['MEDIA_FTM'] / media_lances_livres['MEDIA_FTA']
    media_lances_livres = media_lances_livres.sort_values('MEDIA_FTM', ascending=False)
    media_lances_livres = media_lances_livres.reset_index(drop=True)
    media_lances_livres['RANK'] = media_lances_livres.index + 1
    media_lances_livres = media_lances_livres.head().round(2)
    return media_lances_livres

"""### Função média de arremessos por jogo"""

# Criando função para calcular media de arremessos por jogo
def calcular_media_arremessos(time):
    media_arremessos = pd.DataFrame(time[['JOGADOR', 'MEDIA_FGA', 'MEDIA_FGM']])
    media_arremessos['% ACERTOS'] = media_arremessos['MEDIA_FGM'] / media_arremessos['MEDIA_FGA']
    media_arremessos = media_arremessos.sort_values('MEDIA_FGM', ascending=False)
    media_arremessos = media_arremessos.reset_index(drop=True)
    media_arremessos['RANK'] = media_arremessos.index + 1
    media_arremessos = media_arremessos.head().round(2)
    return media_arremessos

"""### Função média de arremessos de 3 pontos por jogo"""

# Criando função para calcular media de arremessos de 3 pontos por jogo
def calcular_media_arremessos_3pts(time):
    media_arremessos_3pts = pd.DataFrame(time[['JOGADOR', 'MEDIA_FG3A', 'MEDIA_FG3M']])
    media_arremessos_3pts['% ACERTOS'] = media_arremessos_3pts['MEDIA_FG3M'] / media_arremessos_3pts['MEDIA_FG3A']
    media_arremessos_3pts = media_arremessos_3pts.sort_values('MEDIA_FG3M', ascending=False)
    media_arremessos_3pts = media_arremessos_3pts.reset_index(drop=True)
    media_arremessos_3pts['RANK'] = media_arremessos_3pts.index + 1
    media_arremessos_3pts = media_arremessos_3pts.head().round(2)
    return media_arremessos_3pts

"""### Função quantidade de jogos na temporada"""

# Criando função para calcular a quantidade de jogos por temporada
def calcular_jogos(time):
    numero_jogos = pd.DataFrame(time[['JOGADOR', 'GP', 'GS']])
    numero_jogos['% COMO TITULAR'] = numero_jogos['GS'] / numero_jogos['GP']
    numero_jogos = numero_jogos.sort_values('GP', ascending=False)
    numero_jogos = numero_jogos.reset_index(drop=True)
    numero_jogos['RANK'] = numero_jogos.index + 1
    numero_jogos = numero_jogos.head().round(2)
    return numero_jogos

# Criando função para calcular a quantidade de jogos como titular por temporada
def calcular_jogos_titular(time):
    numero_jogos = pd.DataFrame(time[['JOGADOR', 'GP', 'GS']])
    numero_jogos['% COMO TITULAR'] = numero_jogos['GS'] / numero_jogos['GP']
    numero_jogos = numero_jogos.sort_values('GS', ascending=False)
    numero_jogos = numero_jogos.reset_index(drop=True)
    numero_jogos['RANK'] = numero_jogos.index + 1
    numero_jogos = numero_jogos.head().round(2)
    return numero_jogos

"""### Função quantidade de minutos por temporada"""

# Criando função para calcular a quantidade de minutos por temporada
def calcular_minutos(time):
    numero_minutos = pd.DataFrame(time[['JOGADOR', 'MEDIA_MIN']])
    numero_minutos = numero_minutos.sort_values('MEDIA_MIN', ascending=False)
    numero_minutos = numero_minutos.reset_index(drop=True)
    numero_minutos['RANK'] = numero_minutos.index + 1
    numero_minutos = numero_minutos.head().round(2)
    return numero_minutos

"""### Função média de roubos de bola por jogo"""

# Criando função para calcular a média de roubos de bola por jogo
def calcular_media_roubos(time):
    media_roubos = pd.DataFrame(time[['JOGADOR', 'MEDIA_STL']])
    media_roubos = media_roubos.sort_values('MEDIA_STL', ascending=False)
    media_roubos = media_roubos.reset_index(drop=True)
    media_roubos['RANK'] = media_roubos.index + 1
    return media_roubos.head()

"""### Função média de tocos por jogo"""

# Criando função para calcular a média de tocos por jogo
def calcular_media_tocos(time):
    media_tocos = pd.DataFrame(time[['JOGADOR', 'MEDIA_BLK']])
    media_tocos = media_tocos.sort_values('MEDIA_BLK', ascending=False)
    media_tocos = media_tocos.reset_index(drop=True)
    media_tocos['RANK'] = media_tocos.index + 1
    return media_tocos.head()

"""### Função média de erros de posse/perda de bola por jogo"""

# Criando função para calcular a média de perda de bola (erro de posse / turn over) por jogo
def calcular_media_perda(time):
    media_perda = pd.DataFrame(time[['JOGADOR', 'MEDIA_TOV']])
    media_perda = media_perda.sort_values('MEDIA_TOV', ascending=False)
    media_perda = media_perda.reset_index(drop=True)
    media_perda['RANK'] = media_perda.index + 1
    return media_perda.head()

"""### Função média de faltas cometidas por jogo"""

# Criando função para calcular a média de faltas pessoais por jogo
def calcular_media_faltas(time):
    media_faltas = pd.DataFrame(time[['JOGADOR', 'MEDIA_PF']])
    media_faltas = media_faltas.sort_values('MEDIA_PF', ascending=False)
    media_faltas = media_faltas.reset_index(drop=True)
    media_faltas['RANK'] = media_faltas.index + 1
    return media_faltas.head()

"""## Criando o Data Frame com os jovens jogadores"""

# Filtrando os dados dos jogadores que atuaram pelos Lakers na temporada 2022/23
jovens_jogadores = jogadores.query("PLAYER_AGE <= 25 and SEASON_ID == '2022-23'")
jovens_jogadores.head()

jovens_jogadores.shape

jovens_jogadores.to_csv('jovens_jogadores.csv', sep=';', index=False)

"""## Estatíticas de comparação jovens estrelas da NBA - temporada 20022/23

### Média de pontos por jogo
"""

# Criando um rank de media pontos com os jovens jogadores
media_pts_jovens = calcular_media_pontos(jovens_jogadores)

# Selecionar os 5 primeiros jogadores com base no rank
media_pts_jovens = media_pts_jovens.head(5)
media_pts_jovens.head()

# Plotar o gráfico com o rank de pontuação
plt.figure(figsize=(8, 4))
ax = plt.bar(media_pts_jovens['JOGADOR'], media_pts_jovens['MEDIA_PTS'], color='orange')
plt.ylabel('Média de Pontos')
plt.title('Rank dos 5 primeiros jogadores por Média de Pontos')
plt.xticks(rotation=45)
for bar in ax:
    height = bar.get_height()
    plt.text(bar.get_x() + bar.get_width() / 2, height, str(height), ha='center', va='bottom')
plt.show()

"""### Média de assistências por jogo"""

# Criando um rank de media de assistências dos jovens jogadores
media_ast_jovens = calcular_media_assistencias(jovens_jogadores)
media_ast_jovens = media_ast_jovens.head(5)
media_ast_jovens.head()

# Plotar o gráfico com o rank de assistÊncias
plt.figure(figsize=(8, 4))
ax = plt.bar(media_ast_jovens['JOGADOR'], media_ast_jovens['MEDIA_AST'], color='orange')
plt.ylabel('Média de Assistências')
plt.title('Rank dos 5 primeiros jogadores por Média de Assistências')
plt.xticks(rotation=45)
for bar in ax:
    height = bar.get_height()
    plt.text(bar.get_x() + bar.get_width() / 2, height, str(height), ha='center', va='bottom')
plt.show()

"""### Média de rebotes por jogo"""

# Criando um rank de media de rebotes dos jovens jogadores
media_reb_jovens = calcular_media_rebotes(jovens_jogadores)
media_reb_jovens =media_reb_jovens.head(5)
media_reb_jovens.head()

# Plotar o gráfico com o rank de rebotes total por jogo
plt.figure(figsize=(8, 4))
ax = plt.bar(media_reb_jovens['JOGADOR'], media_reb_jovens['MEDIA_REB'])
plt.ylabel('Média de Rebotes por jogo')
plt.title('Rank dos 5 primeiros jogadores por Média de total Rebotes por jogo')
plt.xticks(rotation=45)
for bar in ax:
    height = bar.get_height()
    plt.text(bar.get_x() + bar.get_width() / 2, height, str(height), ha='center', va='bottom')
plt.show()

# Criando um rank de media de rebotes ofensivos dos jovens jogadores
media_reb_jovens = calcular_media_rebotes_ofensivos(jovens_jogadores)
media_reb_jovens = media_reb_jovens.head(5)
media_reb_jovens.head()

# Plotar o gráfico com o rank de rebotes ofensivos
plt.figure(figsize=(8, 4))
ax = plt.bar(media_reb_jovens['JOGADOR'], media_reb_jovens['MEDIA_OREB'], color='red')
plt.ylabel('Média de Rebotes')
plt.title('Rank dos 5 primeiros jogadores por Média de Rebotes Ofensivos por jogo')
plt.xticks(rotation=45)
for bar in ax:
    height = bar.get_height()
    plt.text(bar.get_x() + bar.get_width() / 2, height, str(height), ha='center', va='bottom')
plt.show()

# Criando um rank de media de rebotes defensivos dos jovens jogadores
media_reb_jovens = calcular_media_rebotes_defensivos(jovens_jogadores)
media_reb_jovens = media_reb_jovens.head(5)
media_reb_jovens.head()

# Plotar o gráfico com o rank de rebotes defensivos
plt.figure(figsize=(8, 4))
ax = plt.bar(media_reb_jovens['JOGADOR'], media_reb_jovens['MEDIA_DREB'], color='purple')
plt.ylabel('Média de Rebotes')
plt.title('Rank dos 5 primeiros jogadores por Média de Rebotes defensivos por jogo')
plt.xticks(rotation=45)
for bar in ax:
    height = bar.get_height()
    plt.text(bar.get_x() + bar.get_width() / 2, height, str(height), ha='center', va='bottom')
plt.show()

"""### Média de Lances Livres por jogo"""

# Criando um rank de media de lances livres dos jovens jogadores
media_lances_livres_jovens = calcular_media_lances_livres(jovens_jogadores)
media_lances_livres_jovens = media_lances_livres_jovens.head(5)
media_lances_livres_jovens.head()

# Plotar o gráfico com o rank de lances livres tentados
plt.figure(figsize=(8, 4))
ax = plt.bar(media_lances_livres_jovens['JOGADOR'], media_lances_livres_jovens['MEDIA_FTA'])
plt.ylabel('Média de Lances Livres')
plt.title('Rank dos 5 primeiros jogadores por Média de Lances Livres por jogo')
plt.xticks(rotation=45)
for bar in ax:
    height = bar.get_height()
    plt.text(bar.get_x() + bar.get_width() / 2, height, str(height), ha='center', va='bottom')
plt.show()

# Plotar o gráfico com o rank de lances livres convertidos
plt.figure(figsize=(8, 4))
ax = plt.bar(media_lances_livres_jovens['JOGADOR'], media_lances_livres_jovens['MEDIA_FTM'], color='red')
plt.ylabel('Média de Lances Livres')
plt.title('Rank dos 5 primeiros jogadores por Média de Lances Livres convertidos por jogo')
plt.xticks(rotation=45)
for bar in ax:
    height = bar.get_height()
    plt.text(bar.get_x() + bar.get_width() / 2, height, str(height), ha='center', va='bottom')
plt.show()

# Plotar o gráfico com o rank de % lances livres convertidos
plt.figure(figsize=(8, 4))
ax = plt.bar(media_lances_livres_jovens['JOGADOR'], (media_lances_livres_jovens['% ACERTOS']*100), color='green')
plt.ylabel('% de acertos de Lances Livres convertidos')
plt.title('Rank dos 5 primeiros jogadores por % de acertos Lances Livres convertidos por jogo')
plt.xticks(rotation=45)
for bar in ax:
    height = bar.get_height()
    plt.text(bar.get_x() + bar.get_width() / 2, height, str(height), ha='center', va='bottom')
plt.show()

"""### Média de arremessos de quadra por jogo"""

# Criando um rank de media de arremessos de quadra dos jovens jogadores
media_arremessos_jovens = calcular_media_arremessos(jovens_jogadores)
media_arremessos_jovens = media_arremessos_jovens.head(5)
media_arremessos_jovens.head()

# Plotar o gráfico com o rank de arremessos tentados por jogo
plt.figure(figsize=(8, 4))
ax = plt.bar(media_arremessos_jovens['JOGADOR'], media_arremessos_jovens['MEDIA_FGA'], color='blue')
plt.ylabel('Média de Arremessos tentados por jogo')
plt.title('Rank dos 5 primeiros jogadores por Média de arremessos tentados por jogo')
plt.xticks(rotation=45)
for bar in ax:
    height = bar.get_height()
    plt.text(bar.get_x() + bar.get_width() / 2, height, str(height), ha='center', va='bottom')
plt.show()

# Plotar o gráfico com o rank de arremessos convertidos por jogo
plt.figure(figsize=(8, 4))
ax = plt.bar(media_arremessos_jovens['JOGADOR'], media_arremessos_jovens['MEDIA_FGM'], color='red')
plt.ylabel('Média de Arremessos convertidos por jogo')
plt.title('Rank dos 5 primeiros jogadores por Média de arremessos convertidos por jogo')
plt.xticks(rotation=45)
for bar in ax:
    height = bar.get_height()
    plt.text(bar.get_x() + bar.get_width() / 2, height, str(height), ha='center', va='bottom')
plt.show()

# Plotar o gráfico com o rank de % arremessos convertidos
plt.figure(figsize=(8, 4))
ax = plt.bar(media_arremessos_jovens['JOGADOR'], (media_arremessos_jovens['% ACERTOS']*100), color='green')
plt.ylabel('% de acertos de arremessos convertidos')
plt.title('Rank dos 5 primeiros jogadores por % de arremessos convertidos por jogo')
plt.xticks(rotation=45)
for bar in ax:
    height = bar.get_height()
    plt.text(bar.get_x() + bar.get_width() / 2, height, str(height), ha='center', va='bottom')
plt.show()

"""### Média de arremessos de 3 pontos por jogo"""

# Criando um rank de media de arremessos de 3 pontos dos jovens jogadores
media_arremessos_3pts_jovens = calcular_media_arremessos_3pts(jovens_jogadores)
media_arremessos_3pts_jovens = media_arremessos_3pts_jovens.head(5)
media_arremessos_3pts_jovens.head()

# Plotar o gráfico com o rank de arremessos de 3 pontos tentados por jogo
plt.figure(figsize=(8, 6))
ax = plt.bar(media_arremessos_3pts_jovens['JOGADOR'], media_arremessos_3pts_jovens['MEDIA_FG3A'], color='blue')
plt.ylabel('Média de Arremessos de 3 pontos tentados por jogo')
plt.title('Rank dos 5 primeiros jogadores por Média de arremessos de 3 pontos tentados por jogo')
plt.xticks(rotation=45)
for bar in ax:
    height = bar.get_height()
    plt.text(bar.get_x() + bar.get_width() / 2, height, str(height), ha='center', va='bottom')
plt.show()

# Plotar o gráfico com o rank de arremessos de 3 pontos convertidos por jogo
plt.figure(figsize=(8, 6))
ax = plt.bar(media_arremessos_3pts_jovens['JOGADOR'], media_arremessos_3pts_jovens['MEDIA_FG3M'], color='red')
plt.ylabel('Média de Arremessos de 3 pontos convertidos por jogo')
plt.title('Rank dos 5 primeiros jogadores por Média de arremessos de 3 pontos convertidos por jogo')
plt.xticks(rotation=45)
for bar in ax:
    height = bar.get_height()
    plt.text(bar.get_x() + bar.get_width() / 2, height, str(height), ha='center', va='bottom')
plt.show()

# Plotar o gráfico com o rank de % arremessos de 3 pontos convertidos
plt.figure(figsize=(8, 6))
ax = plt.bar(media_arremessos_3pts_jovens['JOGADOR'], (media_arremessos_3pts_jovens['% ACERTOS']*100), color='green')
plt.ylabel('% de acertos de arremessos de 3 pontos convertidos')
plt.title('Rank dos 5 primeiros jogadores por % de arremessos de 3 pontos convertidos por jogo')
plt.xticks(rotation=45)
for bar in ax:
    height = bar.get_height()
    plt.text(bar.get_x() + bar.get_width() / 2, height, str(height), ha='center', va='bottom')
plt.show()

"""### Média de roubos de bola por jogo"""

# Criando um rank de media de roubos de bola com os jovens jogadores
media_roubos_jovens = calcular_media_roubos(jovens_jogadores)
media_roubos_jovens = media_roubos_jovens.head(5)
media_roubos_jovens.head()

# Plotar o gráfico com o rank de Roubos de bola
plt.figure(figsize=(8, 4))
ax = plt.bar(media_roubos_jovens['JOGADOR'], media_roubos_jovens['MEDIA_STL'], color='orange')
plt.ylabel('Média de Roubos de bola por jogo')
plt.title('Rank dos 5 primeiros jogadores por Média de Roubos de bola por jogo')
plt.xticks(rotation=45)
for bar in ax:
    height = bar.get_height()
    plt.text(bar.get_x() + bar.get_width() / 2, height, str(height), ha='center', va='bottom')
plt.show()

"""### Média de erros de posse por jogo"""

# Criando um rank de media de perdas de bola com os jovens jogadores
media_turnover_jovens = calcular_media_perda(jovens_jogadores)
media_turnover_jovens = media_turnover_jovens.head(5)
media_turnover_jovens.head()

# Plotar o gráfico com o rank de média de erros de posses por jogo
plt.figure(figsize=(8, 4))
ax = plt.bar(media_turnover_jovens['JOGADOR'], media_turnover_jovens['MEDIA_TOV'], color='orange')
plt.ylabel('Média de Roubos de bola')
plt.title('Rank dos 5 primeiros jogadores por Média de Roubos de bola')
plt.xticks(rotation=45)
for bar in ax:
    height = bar.get_height()
    plt.text(bar.get_x() + bar.get_width() / 2, height, str(height), ha='center', va='bottom')
plt.show()

"""### Média de tocos por jogo"""

# Criando um rank de media de tocos com os jovens jogadores
media_tocos_jovens = calcular_media_tocos(jovens_jogadores)
media_tocos_jovens = media_tocos_jovens.head(5)
media_tocos_jovens.head()

# Plotar o gráfico com o rank de média de tocos por jogo
plt.figure(figsize=(8, 4))
ax = plt.bar(media_tocos_jovens['JOGADOR'], media_tocos_jovens['MEDIA_BLK'], color='orange')
plt.ylabel('Média de Tocos')
plt.title('Rank dos 5 primeiros jogadores por Média de Tocos')
plt.xticks(rotation=45)
for bar in ax:
    height = bar.get_height()
    plt.text(bar.get_x() + bar.get_width() / 2, height, str(height), ha='center', va='bottom')
plt.show()

"""### Média de faltas pessoais por jogo"""

# Criando um rank de media de faltas cometidas com jovens jogadores
media_faltas_jovens = calcular_media_faltas(jovens_jogadores)
media_faltas_jovens = media_faltas_jovens.head(5)
media_faltas_jovens.head()

# Plotar o gráfico com o rank de média de faltas cometidas por jogo
plt.figure(figsize=(8, 6))
ax = plt.bar(media_faltas_jovens['JOGADOR'], media_faltas_jovens['MEDIA_PF'], color='orange')
plt.ylabel('Média de faltas cometidas por jogo')
plt.title('Rank dos 5 primeiros jogadores por Média de faltas cometidas por jogo')
plt.xticks(rotation=45)
for bar in ax:
    height = bar.get_height()
    plt.text(bar.get_x() + bar.get_width() / 2, height, str(height), ha='center', va='bottom')
plt.show()

"""### Média de minutos por jogo"""

# Criando um rank de media de minutos por jogo com jovens jogadores
media_minutos_jovens = calcular_minutos(jovens_jogadores)
media_minutos_jovens = media_minutos_jovens.head(5)
media_minutos_jovens.head()

# Plotar o gráfico com o rank de média de minutos por jogo
plt.figure(figsize=(8, 4))
ax = plt.bar(media_minutos_jovens['JOGADOR'], media_minutos_jovens['MEDIA_MIN'], color='orange')
plt.ylabel('Média de minutos por jogo')
plt.title('Rank dos 5 primeiros jogadores por Média de minutos por jogo')
plt.xticks(rotation=45)
for bar in ax:
    height = bar.get_height()
    plt.text(bar.get_x() + bar.get_width() / 2, height, str(height), ha='center', va='bottom')
plt.show()

"""### Quantidade de jogos na temporada"""

# Criando um rank de jogos na temporada com jovens jogadores
media_jogos_jovens = calcular_jogos(jovens_jogadores)
media_jogos_jovens = media_jogos_jovens.head(5)
media_jogos_jovens.head()

# Plotar o gráfico com o rank de jogadores com mais jogos na temporada
plt.figure(figsize=(8, 6))
ax = plt.bar(media_jogos_jovens['JOGADOR'], media_jogos_jovens['GP'], color='blue')
plt.ylabel('Número de jogos na temporada 2022/23')
plt.title('Rank dos 5 primeiros jogadores com mais jogos na temporada')
plt.xticks(rotation=45)
for bar in ax:
    height = bar.get_height()
    plt.text(bar.get_x() + bar.get_width() / 2, height, str(height), ha='center', va='bottom')
plt.show()

# Criando um rank de jogos na temporada com jovens jogadores
media_jogos_jovens = calcular_jogos_titular(jovens_jogadores)
media_jogos_jovens = media_jogos_jovens.head(5)
media_jogos_jovens.head()

# Plotar o gráfico com o rank de jogos como titular na temporada
plt.figure(figsize=(8, 6))
ax = plt.bar(media_jogos_jovens['JOGADOR'], media_jogos_jovens['GS'], color='red')
plt.ylabel('Número de jogos como titular na temporada 2022/23')
plt.title('Rank dos 5 primeiros jogadores com mais jogos de titular na temporada')
plt.xticks(rotation=45)
for bar in ax:
    height = bar.get_height()
    plt.text(bar.get_x() + bar.get_width() / 2, height, str(height), ha='center', va='bottom')
plt.show()

# Plotar o gráfico com o rank de % de jogos como titular
plt.figure(figsize=(8, 4))
ax = plt.bar(media_jogos_jovens['JOGADOR'], (media_jogos_jovens['% COMO TITULAR']*100), color='green')
plt.ylabel('% Número de jogos como titular na temporada 2022/23')
plt.title('Rank dos 5 primeiros jogadores com a maior % de jogos de titular na temporada')
plt.xticks(rotation=45)
for bar in ax:
    height = bar.get_height()
    plt.text(bar.get_x() + bar.get_width() / 2, height, str(height), ha='center', va='bottom')
plt.show()

